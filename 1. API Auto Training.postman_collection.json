{
	"info": {
		"_postman_id": "98e47109-85b5-4d0a-8f0a-6f2ee709a2fa",
		"name": "1. API Auto Training",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13315104"
	},
	"item": [
		{
			"name": "Mock server",
			"item": [
				{
					"name": "Register new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "Register new user - Missing Password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/register",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"body": "{\n    \"error\": \"Missing password\"\n}"
						},
						{
							"name": "Register new user - Invalid email",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"invalid\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/register",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"register"
									],
									"query": [
										{
											"key": "key",
											"value": "key",
											"disabled": true
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 05 Jun 2024 11:22:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "36"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1717586546&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=wqzltXUFsV0WdsbQUHPeqyaA3vCAaMVsfSlxXuFiWm4%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1717586546&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=wqzltXUFsV0WdsbQUHPeqyaA3vCAaMVsfSlxXuFiWm4%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"24-4iP0za1geN2he+ohu8F0FhCjLks\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "88efc8e6ee2885f9-HKG"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Email is not valid. Lower case\"\n}"
						},
						{
							"name": "Register new user - Successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/register",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 05 Jun 2024 11:22:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "36"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1717586546&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=wqzltXUFsV0WdsbQUHPeqyaA3vCAaMVsfSlxXuFiWm4%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1717586546&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=wqzltXUFsV0WdsbQUHPeqyaA3vCAaMVsfSlxXuFiWm4%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"24-4iP0za1geN2he+ohu8F0FhCjLks\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "88efc8e6ee2885f9-HKG"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"email\": \"{{$body 'email'}}\",\n        \"message\": \"Register successfully\",\n        \"id\": 1,\n        \"token\": \"{{$randomUUID}}\"\n    }\n}"
						}
					]
				},
				{
					"name": "Mock request - Data driven",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody = pm.response.json();",
									"",
									"pm.test(`Verify status code is ${pm.variables.get('expectedStatusCode')}`, function () {",
									"    pm.response.to.have.status(pm.variables.get('expectedStatusCode'));",
									"});",
									"",
									"pm.test(`Verify response body contains message: ${pm.variables.get('ExpectedMessage')}`, function () {",
									"    pm.expect(pm.response.text()).to.include(pm.variables.get('ExpectedMessage'));",
									"});",
									"",
									"const keys = pm.variables.get('ExpectedResponseKeys').split(\" \");",
									"pm.test(`Verify response body contains keys: ${keys.join(\", \")}`, function () {",
									"    keys.forEach(key => {",
									"        const keyPath = key.split(\".\");",
									"        pm.expect(traverseKeyPath(resBody, keyPath)).not.to.be.undefined;",
									"    })",
									"});",
									"",
									"function traverseKeyPath(responseBody, keyPath) {",
									"  if (keyPath.length === 0) {",
									"    // Reached the end of the path, return the value$",
									"    return responseBody;",
									"  }",
									"",
									"  const key = keyPath.shift();",
									"  if (typeof responseBody === 'object' && responseBody.hasOwnProperty(key)) {",
									"    return traverseKeyPath(responseBody[key], keyPath);",
									"  } else {",
									"    // Key not found or invalid data type",
									"    return undefined;",
									"  }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-mock-response-name",
								"value": "Register new user - Invalid email",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mockURL}}/api/register",
							"host": [
								"{{mockURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock request - Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "400",
								"disabled": true
							},
							{
								"key": "x-mock-response-name",
								"value": "Register new user - Invalid email",
								"disabled": true
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "true",
								"disabled": true
							},
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"disabled": true
							},
							{
								"key": "x-mock-response-delay",
								"value": "0",
								"disabled": true
							},
							{
								"key": "x-mock-response-id",
								"value": "13315104-baaa24f5-ba67-4988-ac60-091e41993975",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mockURL}}/api/register",
							"host": [
								"{{mockURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock request - get user list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "400",
								"disabled": true
							},
							{
								"key": "x-mock-response-name",
								"value": "Register new user - Invalid email",
								"disabled": true
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "true",
								"disabled": true
							},
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"disabled": true
							},
							{
								"key": "x-mock-response-delay",
								"value": "0",
								"disabled": true
							},
							{
								"key": "x-mock-response-id",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mockURL}}/api/users",
							"host": [
								"{{mockURL}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Response status code is 200\", function () {",
									"//     pm.expect(pm.response.code).to.equal(200);",
									"// });",
									"",
									"",
									"// pm.test(\"Response time is less than 200ms\", function () {",
									"//     pm.expect(pm.response.responseTime).to.be.below(200);",
									"// });",
									"",
									"",
									"// pm.test(\"Validate the response schema for the presence of required fields\", function () {",
									"//     const responseData = pm.response.json();",
									"",
									"//     pm.expect(responseData).to.be.an('object');",
									"//     pm.expect(responseData).to.have.property('page');",
									"//     pm.expect(responseData).to.have.property('per_page');",
									"//     pm.expect(responseData).to.have.property('total');",
									"//     pm.expect(responseData).to.have.property('total_pages');",
									"//     pm.expect(responseData).to.have.property('data');",
									"//     pm.expect(responseData).to.have.property('support');",
									"// });",
									"",
									"",
									"// pm.test(\"Email is in a valid format\", function () {",
									"//     const responseData = pm.response.json();",
									"",
									"//     pm.expect(responseData.data).to.be.an('array');",
									"//     responseData.data.forEach(function (user) {",
									"//         pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"//     });",
									"// });",
									"",
									"",
									"// pm.test(\"Avatar is a non-empty string\", function () {",
									"//     const responseData = pm.response.json();",
									"",
									"//     pm.expect(responseData.data).to.be.an('array');",
									"//     responseData.data.forEach(function (user) {",
									"//         pm.expect(user.avatar).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Avatar should not be empty\");",
									"//     });",
									"// });",
									"",
									"// pm.test(\"Data contains user with id 4\", function () {",
									"//     const responseData = pm.response.json();",
									"//     const userIds = responseData.data.map(user => user.id);",
									"//     pm.collectionVariables.set(\"userIds\", userIds)",
									"//     pm.collectionVariables.get(\"userIds\")",
									"//     //[1,2,3,4,5,6]",
									"//     pm.expect(userIds).to.include(pm.collectionVariables.get(\"userIds\"));",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Get user list - Successfully",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-client-key",
										"value": "client_key",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Jul 2024 07:14:51 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1720108811&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Yd3E1KlmRX7iq6IkgP67B88w9h84VSj3%2FuxiK7J2IDA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1720108811&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Yd3E1KlmRX7iq6IkgP67B88w9h84VSj3%2FuxiK7J2IDA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"3e4-2RLXvr5wTg9YQ6aH95CkYoFNuO8\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=14400"
								},
								{
									"key": "CF-Cache-Status",
									"value": "REVALIDATED"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "89e58f794abc9fb5-SIN"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"email\": \"george.bluth@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Bluth\",\n            \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\n        },\n        {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        {\n            \"id\": 3,\n            \"email\": \"emma.wong@reqres.in\",\n            \"first_name\": \"Emma\",\n            \"last_name\": \"Wong\",\n            \"avatar\": \"https://reqres.in/img/faces/3-image.jpg\"\n        },\n        {\n            \"id\": 4,\n            \"email\": \"eve.holt@reqres.in\",\n            \"first_name\": \"Eve\",\n            \"last_name\": \"Holt\",\n            \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\n        },\n        {\n            \"id\": 5,\n            \"email\": \"charles.morris@reqres.in\",\n            \"first_name\": \"Charles\",\n            \"last_name\": \"Morris\",\n            \"avatar\": \"https://reqres.in/img/faces/5-image.jpg\"\n        },\n        {\n            \"id\": 6,\n            \"email\": \"tracey.ramos@reqres.in\",\n            \"first_name\": \"Tracey\",\n            \"last_name\": \"Ramos\",\n            \"avatar\": \"https://reqres.in/img/faces/6-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
						},
						{
							"name": "Get user list",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"errorCode\": \"ACCESS_FORBIDEN_101\",\r\n    \"errorMessage\": \"User don't have permission to access this resource\"\r\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}